MHMMR
help(package = MHMMR)
ls("package:MHMMR")
search()
library(MHMMR)
search()
ls("package:MHMMR")
emMHMMR
.libpaths()
.libPaths()
list.files(system.file(package = 'MHMMR'), recursive = T, full.names = T)
ls("package:MHMMR")
lsf.str("package:MHMMR")
library(help = caTools)
library(help = MHMMR)
rm(list=ls())
library(MHMMR)
setwd("C:\\Users\\bojan\\Desktop\\Studium Master WS21\\masterarbeit\\Python implementation\\Test signals and benchmarks")
setwd("C:\\Users\\bojan\\Desktop\\Studium Master WS21\\masterarbeit\\Python implementation\\Machine learning segmentation")
setwd("D:\\Boki\\masterarbeit\\Python implementation\\Markov segmentation")
y <- t(read.table("filtered_processes.txt", sep=" "))
y <- t(read.table("outfile2.txt", sep=" "))
x <- seq(1, length(y[, 1]), by=1)
matplot(x, y, type = "l", xlab = "x", ylab = "Y", lty = 1)
K <- 4 # Number of regimes (states)
p <- 1 # Dimension of beta (order of the polynomial regressors)
variance_type <- "heteroskedastic" # "heteroskedastic" or "homoskedastic" model
y <- t(read.table("filtered_processes.txt", sep=" "))
setwd("D:\\Boki\\masterarbeit\\Python implementation\\Markov segmentation")
y <- t(read.table("filtered_processes.txt", sep=" "))
rm(list=ls())
library(MHMMR)
# setwd("C:\\Users\\bojan\\Desktop\\Studium Master WS21\\masterarbeit\\Python implementation\\Test signals and benchmarks")
# setwd("C:\\Users\\bojan\\Desktop\\Studium Master WS21\\masterarbeit\\Python implementation\\Machine learning segmentation")
setwd("D:\\Boki\\masterarbeit\\Python implementation\\Markov segmentation")
# setwd("C:\\Users\\bojan\\Desktop\\Studium Master WS21\\masterarbeit\\Python implementation\\Test signals and benchmarks")
# setwd("C:\\Users\\bojan\\Desktop\\Studium Master WS21\\masterarbeit\\Python implementation\\Machine learning segmentation")
setwd("C:\\Users\\bojan\\Desktop\\Studium Master WS21\masterarbeit\\Python implementation\\Markov segmentation")
# setwd("C:\\Users\\bojan\\Desktop\\Studium Master WS21\\masterarbeit\\Python implementation\\Test signals and benchmarks")
# setwd("C:\\Users\\bojan\\Desktop\\Studium Master WS21\\masterarbeit\\Python implementation\\Machine learning segmentation")
setwd("C:\\Users\\bojan\\Desktop\\Studium Master WS21\\masterarbeit\\Python implementation\\Markov segmentation")
y <- t(read.table("filtered_processes.txt", sep=" "))
# y <- t(read.table("outfile2.txt", sep=" "))
x <- seq(1, length(y[, 1]), by=1)
matplot(x, y, type = "l", xlab = "x", ylab = "Y", lty = 1)
K <- 4 # Number of regimes (states)
p <- 1 # Dimension of beta (order of the polynomial regressors)
variance_type <- "heteroskedastic" # "heteroskedastic" or "homoskedastic" model
n_tries <- 1
max_iter <- 1500
threshold <- 1e-6
verbose <- TRUE
mhmmr <- emMHMMR(X = x, Y = y, K, p, variance_type, n_tries,
max_iter, threshold, verbose)
K <- 5 # Number of regimes (states)
mhmmr <- emMHMMR(X = x, Y = y, K, p, variance_type, n_tries,
max_iter, threshold, verbose)
mhmmr$summary()
mhmmr$plot(what = c("smoothed", "regressors", "loglikelihood"))
ggplot(mhmmr("smoothed"))
library(ggplot2)
ggplot(mhmmr("smoothed"))
ggplot(mhmmr(what = c("smoothed")))
mhmmr$ggplot(what = c("smoothed"))
ggplot(x, y, type = "l", xlab = "x", ylab = "Y", lty = 1)
mhmmr
mhmmr(what = c("smoothed"))
str(mhmmr)
mhmmr$tau_tk
attributes(mhmmr)
str(mhmmr$tau_tk)
attributes(mhmmr)
mhmmr[1]
names(attributes(mhmmr))
attributes(mhmmr)
names(unclass(mhmmr))
mhmmr$param
names(unclass(mhmmr))
mhmmr$show
mhmmr$summary
str(mhmmr)
mhmmr$stat
str(mhmmr)
mhmmr$stat$tau_tk
names(unclass(mhmmr$stat))
mhmmr$stat$smoothed
str(mhmmr)
names(attributes(mhmmr))
attributes(mhmmr)
names(unclass(mhmmr))
mhmmr$show
mhmmr$show()
names(unclass(mhmmr$show))
names(unclass(mhmmr$show()))
names(unclass(mhmmr))
rm(list=ls())
library(MHMMR)
library(ggplot2)
# setwd("C:\\Users\\bojan\\Desktop\\Studium Master WS21\\masterarbeit\\Python implementation\\Test signals and benchmarks")
# setwd("C:\\Users\\bojan\\Desktop\\Studium Master WS21\\masterarbeit\\Python implementation\\Machine learning segmentation")
setwd("C:\\Users\\bojan\\Desktop\\Studium Master WS21\\masterarbeit\\Python implementation\\Markov segmentation")
y <- t(read.table("filtered_processes.txt", sep=" "))
# y <- t(read.table("outfile2.txt", sep=" "))
x <- seq(1, length(y[, 1]), by=1)
matplot(x, y, type = "l", xlab = "x", ylab = "Y", lty = 1)
K <- 5 # Number of regimes (states)
n_tries <- 1
max_iter <- 1500
threshold <- 1e-6
verbose <- TRUE
mhmmr <- emMHMMR(X = x, Y = y, K, p, variance_type, n_tries,
max_iter, threshold, verbose)
mhmmr$summary()
mhmmr$plot(what = c("smoothed", "regressors", "loglikelihood"))
str(mhmmr)
y <- t(read.table("filtered_processes.txt", sep=" "))
# y <- t(read.table("outfile2.txt", sep=" "))
x <- seq(1, length(y[, 1]), by=1)
matplot(x, y, type = "l", xlab = "x", ylab = "Y", lty = 1)
K <- 5 # Number of regimes (states)
p <- 1 # Dimension of beta (order of the polynomial regressors)
variance_type <- "heteroskedastic" # "heteroskedastic" or "homoskedastic" model
n_tries <- 1
max_iter <- 1500
threshold <- 1e-6
verbose <- TRUE
mhmmr <- emMHMMR(X = x, Y = y, K, p, variance_type, n_tries,
max_iter, threshold, verbose)
mhmmr$summary()
mhmmr$plot(what = c("smoothed", "regressors", "loglikelihood"))
str(mhmmr)
names(unclass(mhmmr))
mhmmr$summary
names(unclass(mhmmr))
names(unclass(mhmmr$stat))
mhmmr$stat$computeStats()
mhmmr$stat$computeStats
names(unclass(mhmmr$stat))
mhmmr$stat$alpha_tk
names(unclass(mhmmr$stat))
mhmmr$stat$smoothed_regressors
names(unclass(mhmmr$stat))
mhmmr$stat$filtered
names(unclass(mhmmr$stat))
mhmmr$stat$predicted
names(unclass(mhmmr$stat))
mhmmr$stat$initialize
names(unclass(mhmmr$stat))
mhmmr$stat$BIC
mhmmr$stat$klas
K <- 6 # Number of regimes (states)
mhmmr <- emMHMMR(X = x, Y = y, K, p, variance_type, n_tries,
max_iter, threshold, verbose)
mhmmr$summary()
# names(unclass(mhmmr))
# names(unclass(mhmmr$stat))
mhmmr$stat$klas
# names(unclass(mhmmr))
# names(unclass(mhmmr$stat))
K <- 7 # Number of regimes (states)
mhmmr <- emMHMMR(X = x, Y = y, K, p, variance_type, n_tries,
max_iter, threshold, verbose)
mhmmr$stat$klas
# names(unclass(mhmmr))
# names(unclass(mhmmr$stat))
K <- 8 # Number of regimes (states)
mhmmr <- emMHMMR(X = x, Y = y, K, p, variance_type, n_tries,
max_iter, threshold, verbose)
mhmmr$stat$klas
# names(unclass(mhmmr))
# names(unclass(mhmmr$stat))
K <- 9 # Number of regimes (states)
mhmmr <- emMHMMR(X = x, Y = y, K, p, variance_type, n_tries,
max_iter, threshold, verbose)
mhmmr$stat$klas
# names(unclass(mhmmr))
# names(unclass(mhmmr$stat))
K <- 10 # Number of regimes (states)
mhmmr <- emMHMMR(X = x, Y = y, K, p, variance_type, n_tries,
max_iter, threshold, verbose)
mhmmr$stat$klas
# names(unclass(mhmmr))
# names(unclass(mhmmr$stat))
K <- 11 # Number of regimes (states)
mhmmr <- emMHMMR(X = x, Y = y, K, p, variance_type, n_tries,
max_iter, threshold, verbose)
mhmmr$stat$klas
# names(unclass(mhmmr))
# names(unclass(mhmmr$stat))
K <- 12 # Number of regimes (states)
mhmmr <- emMHMMR(X = x, Y = y, K, p, variance_type, n_tries,
max_iter, threshold, verbose)
mhmmr$stat$klas
# names(unclass(mhmmr))
# names(unclass(mhmmr$stat))
K <- 13 # Number of regimes (states)
mhmmr <- emMHMMR(X = x, Y = y, K, p, variance_type, n_tries,
max_iter, threshold, verbose)
mhmmr$stat$klas
# names(unclass(mhmmr))
# names(unclass(mhmmr$stat))
K <- 14 # Number of regimes (states)
mhmmr <- emMHMMR(X = x, Y = y, K, p, variance_type, n_tries,
max_iter, threshold, verbose)
mhmmr$stat$klas
# names(unclass(mhmmr))
# names(unclass(mhmmr$stat))
K <- 4 # Number of regimes (states)
mhmmr <- emMHMMR(X = x, Y = y, K, p, variance_type, n_tries,
max_iter, threshold, verbose)
max_iter <- 2
mhmmr <- emMHMMR(X = x, Y = y, K, p, variance_type, n_tries,
max_iter, threshold, verbose)
max_iter <- 1
mhmmr <- emMHMMR(X = x, Y = y, K, p, variance_type, n_tries,
max_iter, threshold, verbose)
mhmmr$stat$klas
max_iter <- 1500
